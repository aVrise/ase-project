import bpy
import bmesh
import numpy as np

bond_length={'HH':1.,'CH':1.2,'OTi':2.4,'IrO':2.3,'MnO':2.4,'CMn':3}
add_bond_radius=0.1
add_atom_radius=0.4
file_size=64

ele_color = {'H': [1.0, 1.0, 1.0, 1], 'D': [1.0, 1.0, 0.5271151257058131, 1], 'T': [1.0, 1.0, 0.35153259950043936, 1], 'He': [0.6938717612919899, 1.0, 1.0, 1], 'Li': [0.6038273388553378, 0.21586050011389926, 1.0, 1], 'Be': [0.5394794890121072, 1.0, 0.0, 1], 'B': [1.0, 0.4620769996544071, 0.4620769996544071, 1], 'C': [0.2788942634768104, 0.2788942634768104, 0.2788942634768104, 1], 'N': [0.0295568344378088, 0.08021982031446832, 0.938685728457888, 1], 'O': [1.0, 0.004024717018496307, 0.004024717018496307, 1], 'F': [0.2788942634768104, 0.7454042095403874, 0.08021982031446832, 1], 'Ne': [0.45078578283822346, 0.768151147247507, 0.9130986517934192, 1], 'Na': [0.4072402119017367, 0.10702310297826761, 0.8879231178819663, 1], 'Mg': [0.25415209433082675, 1.0, 0.0, 1], 'Al': [0.5209955732043543, 0.38132601143253014, 0.38132601143253014, 1], 'Si': [0.8713671191987972, 0.5775804404296506, 0.35153259950043936, 1], 'P': [1.0, 0.21586050011389926, 0.0, 1], 'S': [1.0, 1.0, 0.0295568344378088, 1], 'Cl': [0.013702083047289686, 0.8713671191987972, 0.013702083047289686, 1], 'Ar': [0.21586050011389926, 0.6375968739940326, 0.768151147247507, 1], 'K': [0.27467731206038465, 0.05126945837404324, 0.6583748172794485, 1], 'Ca': [0.046665086336880095, 1.0, 0.0, 1], 'Sc': [0.7912979403326302, 0.7912979403326302, 0.7912979403326302, 1], 'Ti': [0.5209955732043543, 0.5394794890121072, 0.5711248294648731, 1], 'V': [0.38132601143253014, 0.38132601143253014, 0.4072402119017367, 1], 'Cr': [0.25415209433082675, 0.31854677812509186, 0.5711248294648731, 1], 'Mn': [0.33245153634617935, 0.1946178304415758, 0.5711248294648731, 1], 'Fe': [0.7454042095403874, 0.13286832155381798, 0.033104766570885055, 1], 'Co': [0.8713671191987972, 0.2788942634768104, 0.35153259950043936, 1], 'Ni': [0.08021982031446832, 0.6307571363461468, 0.08021982031446832, 1], 'Cu': [0.5775804404296506, 0.21586050011389926, 0.033104766570885055, 1], 'Zn': [0.20507873639031693, 0.21586050011389926, 0.43415363617474895, 1], 'Ga': [0.5394794890121072, 0.27467731206038465, 0.27467731206038465, 1], 'Ge': [0.13286832155381798, 0.27467731206038465, 0.27467731206038465, 1], 'As': [0.5088813208549338, 0.21586050011389926, 0.768151147247507, 1], 'Se': [1.0, 0.3564001441459435, 0.0, 1], 'Br': [0.38132601143253014, 0.02217388479338738, 0.02217388479338738, 1], 'Kr': [0.10702310297826761, 0.4793201831008268, 0.6375968739940326, 1], 'Rb': [0.162029375639111, 0.027320891639074894, 0.43415363617474895, 1], 'Sr': [0.0, 1.0, 0.0, 1], 'Y': [0.2961382707983211, 1.0, 1.0, 1], 'Zr': [0.2961382707983211, 0.7454042095403874, 0.7454042095403874, 1], 'Nb': [0.1714411007328226, 0.5394794890121072, 0.5840784178911641, 1], 'Mo': [0.08865558628577294, 0.4620769996544071, 0.4620769996544071, 1], 'Tc': [0.043735029256973465, 0.3419144249086609, 0.3419144249086609, 1], 'Ru': [0.017641954488384078, 0.27467731206038465, 0.27467731206038465, 1], 'Rh': [0.003035269835488375, 0.20507873639031693, 0.26225065752969623, 1], 'Pd': [0.0, 0.14126329114027164, 0.23455058216100522, 1], 'Ag': [0.5271151257058131, 0.5271151257058131, 0.5271151257058131, 1], 'Cd': [1.0, 0.6938717612919899, 0.27467731206038465, 1], 'In': [0.38132601143253014, 0.17788841598362912, 0.1714411007328226, 1], 'Sn': [0.13286832155381798, 0.21586050011389926, 0.21586050011389926, 1], 'Sb': [0.3419144249086609, 0.12477181756095049, 0.4620769996544071, 1], 'Te': [0.6583748172794485, 0.1946178304415758, 0.0, 1], 'I': [0.2961382707983211, 0.0, 0.2961382707983211, 1], 'Xe': [0.05448027644244237, 0.3419144249086609, 0.43415363617474895, 1], 'Cs': [0.0953074666309647, 0.008568125618069307, 0.27467731206038465, 1], 'Ba': [0.0, 0.5840784178911641, 0.0, 1], 'La': [0.162029375639111, 0.6583748172794485, 1.0, 1], 'Ce': [1.0, 1.0, 0.5711248294648731, 1], 'Pr': [0.6938717612919899, 1.0, 0.5711248294648731, 1], 'Nd': [0.5711248294648731, 1.0, 0.5711248294648731, 1], 'Pm': [0.3662525955988395, 1.0, 0.5711248294648731, 1], 'Sm': [0.27467731206038465, 1.0, 0.5711248294648731, 1], 'Eu': [0.11953842798834562, 1.0, 0.5711248294648731, 1], 'Gd': [0.0595112381629812, 1.0, 0.5711248294648731, 1], 'Tb': [0.0295568344378088, 1.0, 0.5711248294648731, 1], 'Dy': [0.013702083047289686, 1.0, 0.5711248294648731, 1], 'Ho': [0.0, 1.0, 0.33245153634617935, 1], 'Er': [0.0, 0.7912979403326302, 0.17788841598362912, 1], 'Tm': [0.0, 0.6583748172794485, 0.08437621154414882, 1], 'Yb': [0.0, 0.5209955732043543, 0.03954623527673284, 1], 'Lu': [0.0, 0.4072402119017367, 0.017641954488384078, 1], 'Hf': [0.07421356838014963, 0.5394794890121072, 1.0, 1], 'Ta': [0.07421356838014963, 0.38132601143253014, 1.0, 1], 'W': [0.01520851442291271, 0.2961382707983211, 0.6724431569576875, 1], 'Re': [0.019382360956935723, 0.20507873639031693, 0.4072402119017367, 1], 'Os': [0.019382360956935723, 0.13286832155381798, 0.3049873140698863, 1], 'Ir': [0.008568125618069307, 0.08865558628577294, 0.24228112246555486, 1], 'Pt': [0.6307571363461468, 0.6307571363461468, 0.7454042095403874, 1], 'Au': [1.0, 0.6375968739940326, 0.016807375752887384, 1], 'Hg': [0.4793201831008268, 0.4793201831008268, 0.6307571363461468, 1], 'Tl': [0.38132601143253014, 0.08865558628577294, 0.07421356838014963, 1], 'Pb': [0.0953074666309647, 0.09989872824711389, 0.11953842798834562, 1], 'Bi': [0.3419144249086609, 0.07818742180518633, 0.4620769996544071, 1], 'Po': [0.4072402119017367, 0.10702310297826761, 0.0, 1], 'At': [0.17788841598362912, 0.07818742180518633, 0.0595112381629812, 1], 'Rn': [0.05448027644244237, 0.2232279573168085, 0.3049873140698863, 1], 'Fr': [0.05448027644244237, 0.0, 0.13286832155381798, 1], 'Ra': [0.0, 0.20507873639031693, 0.0, 1], 'Ac': [0.162029375639111, 0.4072402119017367, 0.9559733532492861, 1], 'Th': [0.0, 0.4910208498478356, 1.0, 1], 'Pa': [0.0, 0.3564001441459435, 1.0, 1], 'U': [0.0, 0.27467731206038465, 1.0, 1], 'Np': [0.0, 0.21586050011389926, 1.0, 1], 'Pu': [0.0, 0.14702726649759498, 1.0, 1], 'Am': [0.08865558628577294, 0.10702310297826761, 0.8879231178819663, 1], 'Cm': [0.18782077230067787, 0.10702310297826761, 0.768151147247507, 1], 'Bk': [0.25415209433082675, 0.07818742180518633, 0.768151147247507, 1], 'Cf': [0.3564001441459435, 0.03688945040110004, 0.6583748172794485, 1], 'Es': [0.45078578283822346, 0.013702083047289686, 0.6583748172794485, 1], 'Fm': [0.45078578283822346, 0.013702083047289686, 0.4910208498478356, 1], 'Md': [0.45078578283822346, 0.004024717018496307, 0.38132601143253014, 1], 'No': [0.5088813208549338, 0.004024717018496307, 0.24228112246555486, 1], 'Lr': [0.5711248294648731, 0.0, 0.13286832155381798, 1], 'Rf': [0.6038273388553378, 0.0, 0.09989872824711389, 1], 'Db': [0.6375968739940326, 0.0, 0.07818742180518633, 1], 'Sg': [0.6938717612919899, 0.0, 0.0595112381629812, 1], 'Bh': [0.7454042095403874, 0.0, 0.03954623527673284, 1], 'Hs': [0.7912979403326302, 0.0, 0.027320891639074894, 1], 'Mt': [0.8307698767746546, 0.0, 0.019382360956935723, 1]}

for i in bpy.data.objects:
    if i.name in ['Camera', 'Light']:
        continue
    else:
        bpy.data.objects.remove(i)

for i in bpy.data.materials:
    bpy.data.materials.remove(i)
    
for i in bpy.data.meshes:
    bpy.data.meshes.remove(i)

def object_from_data(data, name, ele, loc, scale, rotat):
    """ Create a mesh object and link it to a scene """

    mesh = bpy.data.meshes.new(name)
    mesh.from_pydata(data['verts'], data['edges'], data['faces'])

    obj = bpy.data.objects.new(name, mesh)
    obj.rotation_mode='QUATERNION'
    obj.rotation_quaternion=rotat
    obj.location=loc
    obj.scale=scale
    
    mat = bpy.data.materials.get(ele)
    if mat is None:
        # create material
        mat = add_materials(ele)
    obj.data.materials.append(mat)
    bpy.context.collection.objects.link(obj)

    obj = bpy.context.view_layer.objects.active
#    obj.select = True

    mesh.update(calc_edges=True)
    mesh.validate(verbose=True)

#    return obj

def vertex_circle(segments, z):
    """ Return a ring of vertices """
    verts = []

    for i in range(segments):
        angle = (np.pi*2) * i / segments
        verts.append((np.cos(angle), np.sin(angle), z))

    return verts


def face(segments, i, row):
    """ Return a face on a cylinder """

    if i == segments - 1:
        ring_start = segments * row
        base = segments * (row + 1)

        return (base - 1, ring_start, base, (base + segments) - 1)

    else:
        base = (segments * row) + i
        return (base, base + 1, base + segments + 1, base + segments)

def element(a):
    global ele_color
    if a[:2] in ele_color.keys():
        return a[:2]
    else:
        return a[0]


def add_materials(ele):
    global ele_color
    a = bpy.data.materials.new(ele)
    a.diffuse_color=ele_color[ele]
    return a

def add_atoms(name, loc):
    global file_size
    ele = element(name)
    mesh = bpy.data.meshes.new(name)
    obj = bpy.data.objects.new(name, mesh)
    obj.location=loc
    
    bpy.context.collection.objects.link(obj)
    bm = bmesh.new()
    bmesh.ops.create_uvsphere(bm, u_segments=file_size, v_segments=file_size/2, diameter=0.4)
    bm.to_mesh(mesh)
    bm.free()
    
    mat = bpy.data.materials.get(ele)
    if mat is None:
        # create material
        mat = add_materials(ele)
    obj.data.materials.append(mat)

def add_bond(ele1, ele2, loc, scale, rotat, segments=64, rows=2):
    global file_size
    segments=int(file_size/2)
    data = { 'verts': [], 'edges': [], 'faces': [] }

    for z in range(rows):
        data['verts'].extend(vertex_circle(segments, z))

    for i in range(segments):
        for row in range(0, rows - 1):
            data['faces'].append(face(segments, i, row))

    # scene = bpy.context.scene
    object_from_data(data, ele1+ele2, element(ele1), loc, np.array([1.,1.,-1.])*scale, rotat)
    object_from_data(data, ele2+ele1, element(ele2), loc, scale, rotat)
#    return obj

def rotat_angles(vect1,vect2,dis):
    k = vect2-vect1
    v = np.array([0.,0.,1.])
    w = np.arccos(np.dot(v,k)/dis)
    v = np.cross(v, k)
    v = v/np.linalg.norm(v)*np.sin(w/2)
    return [np.cos(w/2),v[0],v[1],v[2]]
    

# a = {'C0': np.array([5.00000000, 5.00000000, 5.00000000]),
#      'H0': np.array([5.62911800, 5.62911800, 5.62911800]),
#      'H1': np.array([4.37088200, 4.37088200, 5.62911800]),
#      'H2': np.array([5.62911800, 4.37088200, 4.37088200]),
#      'H3': np.array([4.37088200, 5.62911800, 4.37088200])
#      }
with open('/Users/jy/Documents/work_place/ase-project/model.xyz','r') as files:
    xyz = [[x for x in y.strip().split() if x != '' ] for y in files.readlines()[2:]]
a0 = {}
a = {}
for i in xyz:
    if i[0] not in a0.keys():
        a0[i[0]]=0
    a[i[0]+str(a0[i[0]])]=np.array([float(x) for x in i[1:]])
    a0[i[0]] = a0[i[0]]+1

center = a['C0']
for i,j in a.items():
    a[i]=a[i]-center
b = a.copy()
for i,j in a.items():
    add_atoms(i, j)
    del b[i]
    for i1,j1 in b.items():
        dis = np.linalg.norm(j1-j)
        bond_name=sorted([element(i),element(i1)])
        bond_name=bond_name[0]+bond_name[1]
        if bond_name not in bond_length.keys() and dis > 1.4:
            continue
        elif bond_name in bond_length.keys() and dis > bond_length[bond_name]:
            continue
        else:
            cent = 0.5*(j1+j)
            rotat = rotat_angles(j,j1,dis)
            scale = np.array([add_bond_radius,add_bond_radius, 0.5 * dis])
            add_bond(i,i1, cent, scale, rotat)



